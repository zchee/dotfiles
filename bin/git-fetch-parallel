#!/bin/bash
set -euo pipefail

CUPS="$(getconf _NPROCESSORS_ONLN)"

find_cmd="$(which find)"
if $find_cmd --version | grep GNU > /dev/null; then
  find_cmd+=' -O3'
fi

REPOSITORY=("$($find_cmd . -maxdepth 1 -not -path . \( -type d -or -type l \) -and \( ! -iname ".*" \) \( ! -iname "*mirror*" \) \( ! -iname "_*" \) \( ! -iname "*build" \) \( ! -iname "*tmp*" \))")

printf "\\x1b[34m[INFO]\\x1b[0m Target repositories\\n"

for r in ${REPOSITORY[*]}
do
  echo "+ $r"
done

touch "$TMPDIR/fetch-parallel-failed"

if hash parallel 2>/dev/null; then
  # shellcheck disable=SC2016
  parallel -j "$CUPS" 'test -d {}/.git || git -C {} fetch --all --prune --auto-gc --verbose && git -C {} fetch --tags --force --auto-gc --verbose && git -C {} pull origin $(git -C {} rev-parse --abbrev-ref HEAD) || { echo "{}" >> $TMPDIR/fetch-parallel-failed; }' ::: "${REPOSITORY[@]}"
else
  for r in "${REPOSITORY[@]}"
  do
    (
    if [[ ! -d $r/.git ]]; then
      return
    fi
    # Useful for fetch version tag or branch
    if [[ -z $BRANCH ]]; then
      BRANCH=$(git rev-parse --abbrev-ref HEAD)
    fi
    git fetch origin
    git pull origin "$BRANCH" || { echo "[ERROR] failed pull $BRANCH on $r"; exit 1; }
    )
  done
fi

if [[ -s "$TMPDIR/fetch-parallel-failed" ]]; then
  while read -r line; do printf "$(tput setaf 1)[ERROR]$(tput sgr0) %s\\n" "failed fetch $line repository"; done < "$TMPDIR/fetch-parallel-failed"
fi

rm -f "$TMPDIR/fetch-parallel-failed"
