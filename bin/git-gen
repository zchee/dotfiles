#!/usr/bin/env bash
set -euo pipefail

# ----------------------------------------------------------------------------
# Initialize the git repository

info() { printf "\\x1b[1;34m[INFO]\\x1b[0m %s\\n" "$1"; }
warn() { printf "\\x1b[1;33m[WARN]\\x1b[0m %s\\n" "$1"; }
error() {
  printf "\x1b[1;34m[ERROR]\x1b[0m %s\\n" "$1"
  exit 1
}

usage() {
  printf "Usage: %s [license] [language...]" "$(basename "$0")"
  exit 1
}

declare GIIGNORE_REPOSITORY
GIIGNORE_REPOSITORY="$HOME/src/github.com/github/gitignore"

# fetch latest gitignore
if [[ ! -d $GIIGNORE_REPOSITORY ]]; then
  git clone https://github.com/github/gitignore.git "${GIIGNORE_REPOSITORY}"
fi

if [[ "$#" -lt 2 ]]; then
  if [[ "$1" == '-l' ]]; then
    find "$GIIGNORE_REPOSITORY" -maxdepth 3 -type f -name '*.gitignore' | cut -d '/' -f 8-9 | sed "s|.gitignore||g" | sort --unique
    exit 0
  fi
  usage
fi

ARG_LICENSE="$1"
shift
ARG_LANGUAGES=("$@")

ORGANIZATION_NAME="${ORGANIZATION_NAME:-$(basename "$(dirname "$PWD")")}"
PROJECT_NAME="${PROJECT_NAME:-$(basename "$PWD")}"
AUTHOR="${AUTHOR:-$PROJECT_NAME}"

declare LICENSE_TYPE
case "$ARG_LICENSE" in
bsd | bsd-project)
  LICENSE_TYPE=BSD3_PROJECT
  LICENSE_IDENTIFIER='BSD-3-Clause'
  ;;
bsd-owner)
  LICENSE_TYPE=BSD3_OWNER
  LICENSE_IDENTIFIER='BSD-3-Clause'
  ;;
bsd-go)
  LICENSE_TYPE=BSD3_THE_GO_AUTHORS
  LICENSE_IDENTIFIER='BSD-3-Clause'
  ;;
mit | mit-project)
  LICENSE_TYPE=MIT_PROJECT
  LICENSE_IDENTIFIER='MIT'
  ;;
mit-owner)
  LICENSE_TYPE=MIT_OWNER
  LICENSE_IDENTIFIER='MIT'
  ;;
apache2 | Apache2)
  LICENSE_TYPE=Apache2
  LICENSE_IDENTIFIER='Apache-2.0'
  ;;
*)
  echo '[FATAL] unknown license type'
  usage
  ;;
esac

# git init
if [[ -d '.git' ]]; then
  warn '.git directory already exist'
fi
git init --ref-format=reftable >/dev/null 2>&1

# write LICENSE if not exist
if [[ ! -f 'LICENSE' ]]; then
  if [[ -n "$LICENSE_TYPE" ]]; then
    cat "$XDG_CONFIG_HOME/boilerplate/license/$LICENSE_TYPE" >LICENSE
    if [[ "$LICENSE_TYPE" == "BSD3_PROJECT" ]] || [[ "$LICENSE_TYPE" == "MIT_PROJECT" ]]; then
      sed -i "s|AUTHOR|$AUTHOR|g" LICENSE
    fi
    sed -i "s|YEAR|$(date '+%Y')|g" LICENSE
  fi
fi

pushd "$GIIGNORE_REPOSITORY" >/dev/null 2>&1
git pull origin main >/dev/null 2>&1
popd >/dev/null 2>&1

# write .gitignore
cat <<EOF >.gitignore
# AUTHOR project generated files to ignore
#  if you want to ignore files created by your editor/tools,
#  please consider a global .gitignore https://help.github.com/articles/ignoring-files
#  please do not open a pull request to add something created by your editor or tools
EOF

# write .gitattributes
touch .gitattributes
cat <<EOF >>.gitattributes
# AUTHOR project gitattributes file
#  https://github.com/github-linguist/linguist/blob/master/docs/overrides.md

* text=auto eol=lf

go.sum    linguist-generated
EOF

declare exists=false
for lang in "${ARG_LANGUAGES[@]}"; do
  LANGUAGE_IGNORE="${lang}"
  if [[ $lang == 'go-pkg' ]] || [[ $lang == 'go-simple' ]]; then
    LANGUAGE_IGNORE="Go"
  fi

  declare file
  if [[ -f "$GIIGNORE_REPOSITORY/$LANGUAGE_IGNORE.gitignore" ]]; then
    file="$GIIGNORE_REPOSITORY/$LANGUAGE_IGNORE.gitignore"
    exists=true
  elif [[ -d "$GIIGNORE_REPOSITORY/$LANGUAGE_IGNORE" ]]; then
    file="$(find "$GIIGNORE_REPOSITORY/$LANGUAGE_IGNORE" -name '*.AllowList.gitignore')"
    exists=true
  else
    warn "Not found ${lang} gitignore"
  fi

  if $exists; then
    printf "\\n# github/gitignore/%s" "${LANGUAGE_IGNORE^}" >>.gitignore
    printf "\\n%s\\n" "$(cat "$file")" >>.gitignore
  fi

  case "$lang" in
  go | Go | go-old | community/Golang)

    case "$lang" in
    community/Golang)
      gsed -i 's|# But not these files...|!/.gitattributes|' .gitignore
      gsed -i 's|# !Makefile|!Makefile|' .gitignore
      gsed -i ':a;N;$!ba;s|#\n# Recommended: Go.AllowList.gitignore\n||' .gitignore
      gsed -i ':a;N;$!ba;s|# ...even if they are in subdirectories\n||' .gitignore
      ;;
    go | Go)
      gsed -E -i ':a;N;$!ba;s|(# Dependency directories )\(remove the comment below to include it\)\n# (vendor/)|\1\n\2|' .gitignore
      gsed -i ':a;N;$!ba;s|# Go workspace file\ngo.work\ngo.work.sum\n\n||' .gitignore
      gsed -i ':a;N;$!ba;s|\n\n# env file\n.env||' .gitignore

      {
        echo "
# Compiled Object files, Static and Dynamic libs (Shared Objects)
*.o
*.a

# Folders
_obj
_test

# Architecture specific extensions/prefixes
*.[568vq]
[568vq].out

# cgo generated
*.cgo1.go
*.cgo2.c
_cgo_defun.c
_cgo_gotypes.go
_cgo_export.*

# test generated
_testmain.go

# benchmark
old.txt
new.txt
bench.txt

# profile
*.pprof

# coverage
coverage.out

# bench
old.txt
new.txt"
      } >>.gitignore
      ;;
    esac

    # .github
    cp -r "$XDG_CONFIG_HOME/boilerplate/.github" .github
    sed -i "s|PKG|$PROJECT_NAME|g" .github/ISSUE_TEMPLATE/bug_report.yml

    # golangci-lint
    cp "$XDG_CONFIG_HOME/boilerplate/go/.golangci.yaml" .
    sed -i "s|local-prefixes: github.com/|local-prefixes: github.com/$ORGANIZATION_NAME/$PROJECT_NAME|" .golangci.yaml
    sed -i "s|AUTHOR: AUTHOR|AUTHOR: $AUTHOR|" .golangci.yaml

    # creates hack directory
    mkdir -p hack/boilerplate
    cp "$XDG_CONFIG_HOME/boilerplate/go/boilerplate.go.txt" hack/boilerplate
    sed -i "s|AUTHOR|$AUTHOR|g" hack/boilerplate/boilerplate.*.txt
    sed -i "s|LICENSE_IDENTIFIER|$LICENSE_IDENTIFIER|g" hack/boilerplate/boilerplate.*.txt
    sed -i "s|YEAR|$(date +%Y)|g" hack/boilerplate/boilerplate.*.txt

    # create root go.mod
    go mod init
    go mod edit -go=1.23 -toolchain=go1.23.0
    touch go.sum

    # write Makefile
    if [[ "$lang" != "go" ]]; then
      cp "$XDG_CONFIG_HOME/boilerplate/go/Makefile" Makefile
    fi
    ;;

  orb)
    NAMESPACE=$ORGANIZATION_NAME
    if [[ $NAMESPACE == 'circleci-orb' ]]; then
      NAMESPACE='cci-orb'
    fi
    sed -i "s|AUTHOR|$ORGANIZATION_NAME/$PROJECT_NAME|" LICENSE
    sed -i "s|AUTHOR|$ORGANIZATION_NAME/$PROJECT_NAME|" .gitignore
    sed -i "s|AUTHOR|$ORGANIZATION_NAME/$PROJECT_NAME|" .gitattributes
    mkdir -p src hack/boilerplate hack/make
    cp "$XDG_CONFIG_HOME"/boilerplate/yaml/orb/boilerplate.*.txt hack/boilerplate/
    cp "$XDG_CONFIG_HOME/boilerplate/yaml/orb/.yamllint" .yamllint
    cp "$XDG_CONFIG_HOME/boilerplate/yaml/orb/orb.mk" hack/make/
    sed -i "s|PKG|$AUTHOR|g" hack/boilerplate/boilerplate.*.txt
    cat <<EOF >>src/orb.yml

version: 2.1

description: |

EOF

    cat <<EOF >>Makefile
# ----------------------------------------------------------------------------
# global

.DEFAULT_GOAL = help

NAMESPACE = $NAMESPACE
ORB = $PROJECT_NAME

# ----------------------------------------------------------------------------
# target

# ----------------------------------------------------------------------------
# include

include hack/make/orb.mk

# ----------------------------------------------------------------------------
# overlays
EOF

    {
      echo "
# packed orb
/src/$PROJECT_NAME.yml"
    } >>.gitignore
    ;;

  *)
    mkdir -p hack/boilerplate
    {
      if find "$XDG_CONFIG_HOME/boilerplate/$lang" -maxdepth 1 -type f -name 'boilerplate.*.txt' >/dev/null 2>&1; then
        cp "$XDG_CONFIG_HOME/boilerplate/$lang"/boilerplate.*.txt hack/boilerplate/
        sed -i "s|PKG|$AUTHOR|g" hack/boilerplate/boilerplate.*.txt
      fi
    }
    ;;
  esac
done

sed -i "s|AUTHOR|$AUTHOR|" .gitignore .gitattributes

# creates README.md
if [ ! -f 'README.md' ]; then
  printf "# %s\\n" "$PROJECT_NAME" >README.md
fi

# set git remote origin
git remote add origin "git@github.com:$ORGANIZATION_NAME/$PROJECT_NAME.git" >/dev/null 2>&1 || true

# git add
[[ -f .gitignore ]] && git add .gitignore
[[ -f .gitattributes ]] && git add .gitattributes
[[ -f LICENSE ]] && git add LICENSE

# git commit
git commit -m 'Initial commit' --signoff --gpg-sign >/dev/null 2>&1

info "Generated $PROJECT_NAME repository"
