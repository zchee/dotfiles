#!/usr/bin/env bash
set -euo pipefail

info() { printf "\\x1b[1;34m[INFO]\\x1b[0m %s\\n" "$1"; }
warn() { printf "\\x1b[1;33m[WARN]\\x1b[0m %s\\n" "$1"; }

TARGET_DIR="."
if [ $# == 1 ]; then
  TARGET_DIR="$1"
  info "target repository: $TARGET_DIR"
fi

find_cmd="$(which find)"
if $find_cmd --version | grep GNU >/dev/null; then
  find_cmd+=' -O3'
fi

REPOSITORY=("$($find_cmd "${TARGET_DIR}" -maxdepth 2 -not -path . \( -type d -or -type l \) -and \( ! -iname ".*" \) \( ! -iname "*mirror*" \) \( ! -iname "_*" \) \( ! -iname "*build" \) \( ! -iname "*tmp*" \))")

info 'Target repositories'

# shellcheck disable=SC2048
for r in ${REPOSITORY[*]}; do
  if [[ -d "$r/.git" ]]; then
    echo "+ $r"
  fi
done

failures="/tmp/fetch-parallel-failed"
touch "$failures"

if command -v parallel >/dev/null 2>&1; then
  parallel -j "$(getconf _NPROCESSORS_ONLN)" "( test -d {}/.git && git -C {} fetch --all --prune --auto-gc --verbose > /dev/null 2>&1 && git -C {} fetch --tags --force --auto-gc --verbose > /dev/null 2>&1 && git -C {} pull origin \$(git -C {} rev-parse --abbrev-ref HEAD) ) || { echo \"{}\" >> ${TMPDIR}/fetch-parallel-failed; }" ::: "${REPOSITORY[@]}"
else
  for r in "${REPOSITORY[@]}"; do
    (
      if [[ ! -d $r/.git ]]; then
        return
      fi
      # Useful for fetch version tag or branch
      if [[ -z $BRANCH ]]; then
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
      fi
      git fetch origin
      git pull origin "$BRANCH" || {
        echo "[ERROR] failed pull $BRANCH on $r"
        exit 1
      }
    )
  done
fi

if [[ -s "$$failures" ]]; then
  while read -r line; do warn "failed fetch $line repository"; done <"$failures"
fi

rm -f "$$failures"
