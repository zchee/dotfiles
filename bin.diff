diff --git a/bin/git-gen b/bin/git-gen
index e1c974c..107345d 100755
--- a/bin/git-gen
+++ b/bin/git-gen
@@ -26,12 +26,14 @@ fi
 
 if [[ "$#" -lt 2 ]]; then
   if [[ "$1" == '-l' ]]; then
-    find "$GIIGNORE_REPOSITORY" -maxdepth 2 -type f -name '*.gitignore' | sort | cut -d '/' -f 8-9 | sed "s|.gitignore||g"
+    find "$GIIGNORE_REPOSITORY" -maxdepth 3 -type f -name '*.gitignore' | cut -d '/' -f 8-9 | sed "s|.gitignore||g" | sort --unique
     exit 0
   fi
   usage
 fi
 
+AUTHOR=${AUTHOR:-$(basename "$(dirname "$PWD")")/$(basename "$PWD")}
+
 ARG_LICENSE="$1"
 shift
 ARG_LANGUAGES=("$@")
@@ -104,43 +106,50 @@ cat << EOF >> .gitattributes
 # AUTHOR project gitattributes file
 #  https://github.com/github/linguist/blob/master/docs/overrides.md
 
-# To prevent CRLF breakages on Windows for fragile files, like testdata.
 * -text
 
 docs        linguist-documentation
 EOF
 
-declare EXISTS=true
+declare exists=false
 for lang in "${ARG_LANGUAGES[@]}"; do
-  LANGUAGE_IGNORE_FILE="${lang}.gitignore"
+  LANGUAGE_IGNORE="${lang}"
   if [[ $lang == 'go-pkg' ]] || [[ $lang == 'go-simple' ]]; then
-    LANGUAGE_IGNORE_FILE="Go.gitignore"
+    LANGUAGE_IGNORE="Go"
   fi
-  if [[ ! -f "$GIIGNORE_REPOSITORY/$LANGUAGE_IGNORE_FILE" ]]; then
-    if [[ -f "$GIIGNORE_REPOSITORY/Global/${lang}.gitignore" ]]; then
-      # Global
-      LANGUAGE_IGNORE_FILE="Global/${lang}.gitignore"
-    elif [[ -f "$GIIGNORE_REPOSITORY/community/${lang}.gitignore" ]]; then
-      # community
-      LANGUAGE_IGNORE_FILE="community/${lang}.gitignore"
-    else
-      warn "Not found ${lang}.gitignore"
-      EXISTS=false
-    fi
+
+  declare file
+  if [[ -f "$GIIGNORE_REPOSITORY/$LANGUAGE_IGNORE.gitignore" ]]; then
+    file="$GIIGNORE_REPOSITORY/$LANGUAGE_IGNORE.gitignore"
+    exists=true
+  elif [[ -d "$GIIGNORE_REPOSITORY/$LANGUAGE_IGNORE" ]]; then
+    file="$(find "$GIIGNORE_REPOSITORY/$LANGUAGE_IGNORE" -name '*.AllowList.gitignore')"
+    exists=true
+  else
+    warn "Not found ${lang} gitignore"
   fi
 
-  if $EXISTS; then
-    printf "\\n# github/gitignore/%s" "${LANGUAGE_IGNORE_FILE^}" >> .gitignore
-    printf "\\n%s\\n" "$(cat "$GIIGNORE_REPOSITORY/$LANGUAGE_IGNORE_FILE")" >> .gitignore
+  if $exists; then
+    printf "\\n# github/gitignore/%s" "${LANGUAGE_IGNORE^}" >> .gitignore
+    printf "\\n%s\\n" "$(cat "$file")" >> .gitignore
   fi
 
   case "$lang" in
-    go | Go | go-old)
-      sed -i 's|Dependency directories (remove the comment below to include it)|Dependency directories|' .gitignore
-      sed -i 's|# vendor/|vendor/|' .gitignore
-
-      {
-        echo "
+    go | Go | go-old | community/Golang)
+
+    case "$lang" in
+      community/Golang)
+        sed -i 's|# But not these files...|!/.gitattributes|' .gitignore
+        sed -i 's|# !Makefile|!Makefile|' .gitignore
+        sed -i ':a;N;$!ba;s|#\n# Recommended: Go.AllowList.gitignore\n||' .gitignore
+        sed -i ':a;N;$!ba;s|# ...even if they are in subdirectories\n||' .gitignore
+        ;;
+      go | Go | go-old)
+        sed -i 's|Dependency directories (remove the comment below to include it)|Dependency directories|' .gitignore
+        sed -i 's|# vendor/|vendor/|' .gitignore
+
+        {
+          echo "
 # Compiled Object files, Static and Dynamic libs (Shared Objects)
 *.o
 *.a
@@ -173,7 +182,8 @@ bench.txt
 
 # coverage
 coverage.*"
-      } >> .gitignore
+        } >> .gitignore
+    esac
 
       # write .gitattributes
       cat << EOF >> .gitattributes
@@ -186,7 +196,7 @@ EOF
       cp -r "$XDG_CONFIG_HOME/boilerplate/.github" .github
       sed -i "s|PKG|$PROJECT_NAME|g" .github/ISSUE_TEMPLATE/bug_report.yml
 
-      sed -i "s|AUTHOR|$(basename "$(dirname "$PWD")")/$(basename "$PWD")|" .gitignore .gitattributes
+      sed -i "s|AUTHOR|$AUTHOR|" .gitignore .gitattributes
 
       # golangci-lint
       cp "$XDG_CONFIG_HOME/boilerplate/go/.golangci.yml" .
@@ -200,19 +210,19 @@ EOF
       sed -i "s|YEAR|$(date +%Y)|g" hack/boilerplate/boilerplate.*.txt
 
       # create root go.mod
-      go mod init && go mod edit -go=1.17
+      go mod init && go mod edit -go=1.18
       touch go.sum
 
       # create tools directory
-      mkdir -p tools
-      pushd tools > /dev/null 2>&1
-      go mod init && go mod edit -go=1.17
-      cat "$XDG_CONFIG_HOME/boilerplate/go/boilerplate.go.tools.txt" > tools.go
-      sed -i "s|AUTHOR|$AUTHOR|g" tools.go
-      sed -i "s|YEAR|$(date +%Y)|g" tools.go
-      go mod edit -require=golang.org/x/tools@master -require=mvdan.cc/gofumpt@master -replace=mvdan.cc/gofumpt=github.com/mvdan/gofumpt@master
-      go mod tidy -v
-      popd > /dev/null 2>&1
+      # mkdir -p tools
+      # pushd tools > /dev/null 2>&1
+      # go mod init && go mod edit -go=1.17
+      # cat "$XDG_CONFIG_HOME/boilerplate/go/boilerplate.go.tools.txt" > tools.go
+      # sed -i "s|AUTHOR|$AUTHOR|g" tools.go
+      # sed -i "s|YEAR|$(date +%Y)|g" tools.go
+      # go mod edit -require=golang.org/x/tools@master -require=mvdan.cc/gofumpt@master -replace=mvdan.cc/gofumpt=github.com/mvdan/gofumpt@master
+      # go mod tidy -v
+      # popd > /dev/null 2>&1
 
       # write Makefile
       if [[ "$lang" != "go" ]]; then
diff --git a/bin/git-goget b/bin/git-goget
index f4041ad..af421c7 100755
--- a/bin/git-goget
+++ b/bin/git-goget
@@ -13,7 +13,7 @@ readonly import_path
 if [[ ! -d "$(go env GOPATH)/src/$clone_path" ]]; then
   mkdir -p "$(go env GOPATH)/src/$(dirname "$clone_path")"
   if ! git clone "https://github.com/$import_path.git" "$(go env GOPATH)/src/$clone_path" 2> /dev/null; then
-    url=$(curl -siL "https://$clone_path?go-get=1" | grep go-import -C 3 | grep 'git https://' | sed -E "s|git (https://.*)['\"]>|\1|" | awk '{print $4}')
+    url=$(curl -siL "https://$clone_path?go-get=1" | grep go-import -C 3 | grep 'git https://' | sed -E "s|git (https://.*)['\"]>|\1|" | awk -F'https' '{print "https"$2}' | cut --delimiter='"' -f1)
     # git clone "git@github.com:${url#https://github.com/}" "$(go env GOPATH)/src/$clone_path"
     git clone "${url}" "$(go env GOPATH)/src/$clone_path"
   fi
diff --git a/bin/go-install-pkg b/bin/go-install-pkg
index 91a2748..f82c977 100755
--- a/bin/go-install-pkg
+++ b/bin/go-install-pkg
@@ -18,25 +18,50 @@ readonly filter
 
 trap INT ABRT TERM
 
-for gomod in $(find . -type f -name 'go.mod' -not -iwholename '*vendor*' -not -iwholename '*testdata*' -not -iwholename '*example*' -not -iwholename './tools/go.mod' -not -iwholename '*/_*');
+for gomod in $(find -O3 . -maxdepth 1 -type f -name 'go.mod' -not -iwholename '*vendor*' -not -iwholename '*not*' -not -iwholename '*testdata*' -not -iwholename '*test*' -not -iwholename '*example*' -not -iwholename './tools/go.mod' -not -iwholename '*/_*');
 do
   MODROOT="$(realpath $(dirname "$gomod"))"
 
   pushd "${MODROOT}" > /dev/null 2>&1
-  
+
   if [[ "$MODROOT" != '/usr/local/go'* ]]; then
     ${GO} mod vendor -v
   fi
-  
-  PKGS="$(${GO} list -f="$filter" ./... | tr '\n' ' ')"
-  eval "${GO} install -v -x -mod=vendor $PKGS"
+
+  PKGS="$(${GO} list -mod=readonly -f="$filter" ./... | tr '\n' ' ')"
+  eval "${GO} install -mod=readonly -v -x $PKGS"
   # echo "PKGS: $PKGS"  # debug
-  
+
+  modmode='vendor'
+  if [[ -n "$(go env GOWORK)" ]]; then
+     modmode='readonly'
+  fi
+
   if [[ -d "$(dirname "$gomod")/vendor" ]]; then
-    VENDOR_PKGS="$(${GO} list -f="$filter" "$MODROOT"/vendor/... | tr '\n' ' ')"
-    eval "${GO} install -v -x -mod=vendor $VENDOR_PKGS" || true
+    VENDOR_PKGS="$(${GO} list -mod=${modmode} -f="$filter" "$MODROOT"/vendor/... | tr '\n' ' ' || true)"
+    eval "${GO} install -mod=readonly -v -x $VENDOR_PKGS" || true
     # echo "VENDOR_PKGS: $VENDOR_PKGS"  # debug
   fi
 
   pushd "${ROOT}" > /dev/null 2>&1
 done
+
+# MODROOT="$(realpath "$(dirname $(go env GOMOD))")"
+# 
+# pushd "${MODROOT}" > /dev/null 2>&1
+# 
+# if [[ "$MODROOT" != '/usr/local/go'* ]]; then
+#   ${GO} mod vendor -v
+# fi
+# 
+# PKGS="$(${GO} list -mod=readonly -f="$filter" ./... | tr '\n' ' ')"
+# eval "${GO} install -mod=readonly -v -x $PKGS"
+# # echo "PKGS: $PKGS"  # debug
+# 
+# if [[ -d "$(dirname "$(dirname "$PWD")")/vendor" ]]; then
+#   VENDOR_PKGS="$(${GO} list -mod=readonly -f="$filter" "$MODROOT"/vendor/... | tr '\n' ' ')"
+#   eval "${GO} install -mod=readonly -v -x $VENDOR_PKGS" || true
+#   # echo "VENDOR_PKGS: $VENDOR_PKGS"  # debug
+# fi
+# 
+# pushd "${ROOT}" > /dev/null 2>&1
diff --git a/bin/go-tools-install b/bin/go-tools-install
index e3a45b4..7d8753f 100755
--- a/bin/go-tools-install
+++ b/bin/go-tools-install
@@ -8,7 +8,9 @@ if [[ "$CWD" != *'golang.org/x/tools'* ]]; then
 fi
 
 GO=${GO:-$(which go)}
+
 export CGO_ENABLED=0
+export GOCACHE="$(mktemp -d)"
 
 buildtags='osusergo,netgo,static'
 readonly buildtags
diff --git a/bin/gomod-versions b/bin/gomod-versions
index 820b714..cf84ffc 100755
--- a/bin/gomod-versions
+++ b/bin/gomod-versions
@@ -8,7 +8,7 @@ error() { printf "\x1b[1;31m[ERROR]\x1b[0m %s\\n" "$1" >&2; exit 1; }
 type go >/dev/null 2>&1 || { error "go command not found"; }
 
 if [[ "$#" -eq 2 && "$1" == 'latest' ]]; then
-  go list -u -m -versions -mod=mod "$2@upgrade" | awk -F' ' '{print $NF}'
+  go list -u -m -versions -mod=readonly "$2@upgrade" | awk -F' ' '{print $NF}'
 else
-  go list -u -m -versions -mod=mod "$1"
+  go list -u -m -versions -mod=readonly "$1"
 fi
diff --git a/bin/rgk b/bin/rgk
index 763b571..c62897d 100755
--- a/bin/rgk
+++ b/bin/rgk
@@ -7,7 +7,7 @@ command -v rg >/dev/null 2>&1 || { error "command not found: rg"; }
 
 GOPATH="$(go env GOPATH)"
 
-PATTERN="$1"
+readonly PATTERN="$1"
 shift
 
 exec "$(which rg)" \
@@ -16,7 +16,11 @@ exec "$(which rg)" \
   --mmap \
   --no-config \
   --no-ignore-vcs \
-  --pretty --colors=match:fg:yellow --colors=match:bg:black --colors=path:fg:magenta \
+  --pretty \
+  --colors=match:fg:yellow \
+  --colors=match:bg:black \
+  --colors=path:fg:blue \
+  --colors=path:style:bold \
   --threads=16 \
   --type go \
   --glob='!{_*,zz_generated.*.go,bindata.go}' \
diff --git a/bin/rgo b/bin/rgo
index a304f8e..7210703 100755
--- a/bin/rgo
+++ b/bin/rgo
@@ -7,13 +7,16 @@ shift
 
 exec "$(which rg)" \
   "$PATTERN" \
-  --no-config \
   --type go \
   --type asm \
   --mmap \
-  --threads=16 \
+  --threads=$(( $(nproc) + 1)) \
   --block-buffered \
-  --pretty --colors=match:fg:yellow --colors=match:bg:black --colors=path:fg:magenta \
+  --pretty \
+  --colors=match:fg:yellow \
+  --colors=match:bg:black \
+  --colors=path:fg:blue \
+  --colors=path:style:bold \
   --no-ignore-vcs \
   --glob='!{_*,zz_generated.*.go,bindata.go}' \
   --glob='!{vendor,staging,third_party}' \
