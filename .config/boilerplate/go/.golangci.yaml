# https://golangci-lint.run/usage/configuration/
# https://github.com/golangci/golangci-lint/blob/master/pkg/config/linters_settings.go
---
run:
  timeout: 1m
  issues-exit-code: 1
  tests: true
  build-tags: []
  skip-dirs: []
  skip-dirs-use-default: true
  skip-files: []
  allow-parallel-runners: true
  go: '1.19'

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: false
  sort-results: true

linters:
  fast: false
  disable-all: true
  disabled:
    - exhaustruct        #  Checks if all structure fields are initialized
    - forbidigo          #  Forbids identifiers
    - forcetypeassert    #  finds forced type assertions
    - gci                #  Gci controls golang package import order and makes it always deterministic
    - gochecknoglobals   #  check that no global variables exist
    - gochecknoinits     #  Checks that no init functions are present in Go code
    - godox              #  Tool for detection of FIXME, TODO and other comment keywords
    - goerr113           #  Golang linter to check the errors handling expressions
    - goheader           #  Checks is file header matches to pattern
    - gomnd              #  An analyzer to detect magic numbers
    - gomoddirectives    #  Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - ireturn            #  Accept Interfaces, Return Concrete Types
    - nonamedreturns     #  Reports all named returns
    - nosnakecase        #  nosnakecase is a linter that detects snake case of variable naming and function name
    - wsl                #  Whitespace Linter

    - exhaustivestruct   #  Deprecated: Checks if all struct's fields are initialized
    - golint             #  Deprecated: Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    - ifshort            #  Deprecated: Checks that your code uses short syntax for if-statements whenever possible
    - interfacer         #  Deprecated: Linter that suggests narrower interface types
    - maligned           #  Deprecated: Tool to detect Go structs that would take less memory if their fields were sorted
    - scopelint          #  Deprecated: Scopelint checks for unpinned variables in go programs
  enable:
    - asasalint          #  check for pass []any as any in variadic func(...any)
    - asciicheck         #  Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk            #  Checks for dangerous unicode character sequences
    - bodyclose          #  checks whether HTTP response body is closed successfully
    - containedctx       #  containedctx is a linter that detects struct contained context.Context field
    - contextcheck       #  check the function whether use a non-inherited context
    - cyclop             #  checks function and package cyclomatic complexity
    - deadcode           #  Finds unused code
    - decorder           #  check declaration order and count of types, constants, variables and functions
    - depguard           #  Go linter that checks if package imports are in a list of acceptable packages
    - dogsled            #  Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupl               #  Tool for code clone detection
    - durationcheck      #  check for two durations multiplied together
    - errcheck           #  Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - errchkjson         #  Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted
    - errname            #  Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`
    - errorlint          #  errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - execinquery        #  execinquery is a linter about query string checker in Query function which reads your Go src files and warning it finds
    - exhaustive         #  check exhaustiveness of enum switch statements
    - exportloopref      #  checks for pointers to enclosing loop variables
    - funlen             #  Tool for detection of long functions
    - gocognit           #  Computes and checks the cognitive complexity of functions
    - goconst            #  Finds repeated strings that could be replaced by a constant
    - gocritic           #  Provides diagnostics that check for bugs, performance and style issues
    - gocyclo            #  Computes and checks the cyclomatic complexity of functions
    - godot              #  Check if comments end in a period
    - gofmt              #  Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - gofumpt            #  Gofumpt checks whether code was gofumpt-ed
    - goimports          #  In addition to fixing imports, goimports also formats your code in the same style as gofmt
    - gomodguard         #  Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations
    - goprintffuncname   #  Checks that printf-like functions are named with `f` at the end
    - gosec              #  Inspects source code for security problems
    - gosimple           #  Linter for Go source code that specializes in simplifying code
    - govet              #  Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - grouper            #  An analyzer to analyze expression groups
    - importas           #  Enforces consistent import aliases
    - ineffassign        #  Detects when assignments to existing variables are not used
    - lll                #  Reports long lines
    - maintidx           #  maintidx measures the maintainability index of each function
    - makezero           #  Finds slice declarations with non-zero initial length
    - misspell           #  Finds commonly misspelled English words in comments
    - nakedret           #  Finds naked returns in functions greater than a specified function length
    - nestif             #  Reports deeply nested if statements
    - nilerr             #  Finds the code that returns nil even if it checks that the error is not nil
    - nilnil             #  Checks that there is no simultaneous return of `nil` error and an invalid value
    - nlreturn           #  nlreturn checks for a new line before return and branch statements to increase code clarity
    - noctx              #  noctx finds sending http request without context.Context
    - nolintlint         #  Reports ill-formed or insufficient nolint directives
    - nosprintfhostport  #  Checks for misuse of Sprintf to construct a host with port in a URL
    - paralleltest       #  paralleltest detects missing usage of t.Parallel() method in your Go test
    - prealloc           #  Finds slice declarations that could potentially be pre-allocated
    - predeclared        #  find code that shadows one of Go's predeclared identifiers
    - promlinter         #  Check Prometheus metrics naming via promlint
    - revive             #  Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint
    - rowserrcheck       #  checks whether Err of rows is checked successfully
    - sqlclosecheck      #  Checks that sql.Rows and sql.Stmt are closed
    - staticcheck        #  It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint
    - structcheck        #  Finds unused struct fields
    - stylecheck         #  Stylecheck is a replacement for golint
    - tagliatelle        #  Checks the struct tags
    - tenv               #  tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - testpackage        #  linter that makes you use a separate _test package
    - thelper            #  thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - tparallel          #  tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - typecheck          #  Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert          #  Remove unnecessary type conversions
    - unparam            #  Reports unused function parameters
    - unused             #  Checks Go code for unused constants, variables, functions and types
    - varcheck           #  Finds unused global variables and constants
    - varnamelen         #  checks that the length of a variable's name matches its scope
    - wastedassign       #  wastedassign finds wasted assignment statements
    - whitespace         #  Tool for detection of leading and trailing whitespace
    - wrapcheck          #  Checks that errors returned from external packages are wrapped

linters-settings:
  asasalint:
    exclude: []
    use-builtin-exclusions: true
    ignore-test: false
  cyclop:
    # max-complexity: 
    # package-average:
    skip-tests: true
  depguard:
    list-type: denylist
    include-go-root: false
  dupl:
    threshold: 150
  errcheck:
    disable-default-exclusions: false
    check-type-assertions: true
    check-blank: true
    ignore: ""
    # exclude: .errcheckignore
    exclude-functions: []

  # TODO(zchee): start re-implements point
  errorlint:
    errorf: true
    asserts: true
    comparison: true
  funlen:
    lines: 100
    statements: 60
  gocognit:
    min-complexity: 30
  goconst:
    min-len: 3
    min-occurrences: 3
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - commentedOutCode
      - whyNoLint
    settings:
      hugeParam:
        sizeThreshold: 80
      rangeExprCopy:
        sizeThreshold: 512
      rangeValCopy:
        sizeThreshold: 128
  gocyclo:
    min-complexity: 30
  godot:
    scope: declarations
    capital: false
  gofmt:
    simplify: true
  gofumpt:
    extra-rules: true
  goimports:
    local-prefixes: github.com/
  govet:
    enable-all: true
    check-shadowing: true
    disable:
      - fieldalignment
  importas:
    alias: []
    no-unaliased: true
  lll:
    line-length: 150
    tab-width: 1
  misspell:
    locale: US
  nakedret:
    max-func-lines: 30
  nestif:
    min-complexity: 4
  prealloc:
    simple: true
    range-loops: true
    for-loops: true
  testpackage:
    skip-regexp: '.*(export)_test\.go'
  unparam:
    check-exported: true
    algo: cha
  varnamelen:
    max-distance: 5
    min-name-length: 1
    check-receiver: true
    check-return: true
    ignore-type-assert-ok: false
    ignore-map-index-ok: false
    ignore-chan-recv-ok: false
  whitespace:
    multi-if: true
    multi-func: true

issues:
  include:
     # include revive rules
    - "EXC0012"
    - "EXC0013"
    - "EXC0014"
    - "EXC0015"
  max-issues-per-linter: 0
  max-same-issues: 0
  exclude-use-default: true
  exclude-rules:
    - path: _test\.go
      linters:
        - errcheck
        - funlen
        - gocognit
        - goconst
        - gocyclo
        - gosec
        - lll
        - wrapcheck
    - path: "(.*)?_example_test.go"
      linters:
        - gocritic
    # Exclude shadow checking on the variable named err
    - text: "shadow: declaration of \"err|ok|ctx\""
      linters:
        - govet
    - text: "continue with no blank line before"
      linters:
        - nlreturn
